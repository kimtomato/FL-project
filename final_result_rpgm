import matplotlib.pyplot as plt

#rwp
import numpy as np
#
step =[ 3,   7,  11,  15,  19,  23,  27,  31,  35, 39,  43,  47,  51,  55,  59,  63,  67,  71,
75,  79,  83,  87,  91,  95,  99, 103, 107, 111, 115, 119, 123, 127, 131, 135, 139, 143,
147, 151, 155, 159, 163, 167, 171, 175, 179, 183, 187, 191, 195, 199, 203, 207, 211, 215,
219, 223]
#noise0_vkn

#noise_1.6_vkn
vkn_noise_16_acc = np.array([0.13562771, 0.18554113, 0.24,       0.29666667, 0.36593074, 0.43662338,
 0.50251082, 0.54121212, 0.59082251, 0.62857143, 0.64025974, 0.66593073,
 0.68515151 ,0.69229437, 0.70874459, 0.71493506, 0.72692641, 0.73705628,
 0.74281385, 0.74528138, 0.74709957, 0.75324675, 0.75588744, 0.75891775,
 0.765671  , 0.76549783, 0.77415584, 0.77116883, 0.77164502, 0.77142857,
 0.77857143, 0.77948052, 0.77497836, 0.78168832, 0.78545455, 0.78246753,
 0.78008658, 0.78298702, 0.78268398, 0.78917749, 0.79181818, 0.79229437,
 0.79298702, 0.79307359, 0.79406926, 0.79424243, 0.79675325, 0.79889178,
 0.79792208, 0.79948052, 0.79844156, 0.80103896, 0.80515152, 0.80099567,
 0.80095238, 0.80285714])
vkn_noise_16_error = np.array([0.01020991, 0.01198871, 0.0136667,  0.0185552,  0.01980895, 0.01736524,
 0.01523249, 0.01376223, 0.01265506, 0.01206821, 0.01056997, 0.01135432,
 0.01116407, 0.00889041, 0.0071529 , 0.00679921, 0.00948197, 0.00604812,
 0.00690998, 0.00708498, 0.00741736, 0.00787515, 0.00764126, 0.00838896,
 0.00753393, 0.00567431, 0.00667974, 0.00523048, 0.00605762, 0.00523249,
 0.00662408, 0.0049867 , 0.00666515, 0.00614678 ,0.00528993, 0.00447562,
 0.0039845 , 0.00525034, 0.00592069, 0.00351348, 0.00423187, 0.00439665,
 0.00545502, 0.00489343, 0.0042314 , 0.00491274 ,0.0044166,  0.00528084,
 0.00487946, 0.00607521, 0.00537197, 0.00541798 ,0.00470138, 0.00599987,
 0.00542628, 0.00587219])
vkn_noise_16_loss =np.array([2.28068337, 2.21775085, 2.11003112 ,2.00158529 ,1.84108471 ,1.67360034,
 1.52700723, 1.42221323, 1.31075917, 1.21669762, 1.17442727, 1.10343963,
 1.05346925, 1.01802648, 0.98136651, 0.95431981, 0.9254226 , 0.89644225,
 0.87682262, 0.85913459, 0.84033582, 0.82925952, 0.81337126, 0.80218894,
 0.78399394, 0.77425069, 0.76125567, 0.74939658, 0.7452971 , 0.7361555,
 0.72552594, 0.71947898, 0.72636746, 0.70958792, 0.69993828, 0.70498979,
 0.70311322, 0.69587437, 0.69648488, 0.67980487, 0.67153351, 0.67452352,
 0.66765861, 0.66649851, 0.66099276, 0.65457902, 0.65277917, 0.64848573,
 0.6466533 , 0.64135904, 0.64148235, 0.63927745, 0.62886637, 0.63315843,
 0.63156971, 0.63276508])
vkn_noise_16_lerror = np.array([0.00516141, 0.01185244, 0.01259805, 0.02569274, 0.02485261, 0.0242435,
 0.027575,   0.02050255, 0.01833783, 0.02015923, 0.01914253, 0.01940397,
 0.01761593, 0.01143989, 0.01207937, 0.01142424 ,0.01473507, 0.01202946,
 0.01201672 ,0.0131836 , 0.01294554, 0.01407467, 0.01005666, 0.01357419,
 0.01081708, 0.00933349, 0.00931099, 0.01018579, 0.01128241, 0.00949215,
 0.01303221, 0.00985353, 0.0114099 , 0.01112007, 0.01123576, 0.01061272,
 0.01168986, 0.01179662, 0.01468094, 0.00966057, 0.00927952, 0.00991824,
 0.01020439, 0.01050897, 0.01058442, 0.00988508, 0.01081442, 0.01082533,
 0.01165938, 0.01027277, 0.00990515, 0.01108195, 0.00878762, 0.01056757,
 0.00936733, 0.00934209])


#bs_noise_1.6_bs
bs_noise_16_acc = np.array([0.14670996, 0.21718615, 0.2743723 , 0.31402597 ,0.39380952 ,0.47536797,
 0.52831169, 0.55290043, 0.5865368 , 0.61012987 ,0.63337662 ,0.64917749,
 0.65199134, 0.66168831, 0.68199134, 0.69090909 ,0.70233766 ,0.70251083,
 0.69484849, 0.71333333, 0.71372294, 0.71619047 ,0.71779221 ,0.72679654,
 0.73575757, 0.73523809, 0.73108225, 0.74051948 ,0.73419914 ,0.73402598,
 0.7426407 , 0.7391342 , 0.74324675, 0.74861472 ,0.75744589 ,0.75528139,
 0.75909091, 0.75541126, 0.75549783, 0.75675325 ,0.75575757 ,0.76571429,
 0.76393939, 0.76779221, 0.76619048, 0.76900433 ,0.76709957 ,0.76458875,
 0.76909091, 0.77662338, 0.77761905, 0.77541126 ,0.77761904 ,0.77714286,
 0.76995671, 0.77354978])
bs_noise_16_error = np.array([0.0095431 , 0.01932231, 0.01659807, 0.01676605 ,0.02075191 ,0.02176766,
 0.01615087, 0.01868468, 0.01825135, 0.01503945, 0.01338621 ,0.01172105,
 0.01556071, 0.0144551 , 0.0118417 , 0.01053318, 0.01112068 ,0.01205748,
 0.00886193, 0.00957926, 0.00777463, 0.01046825, 0.01141366, 0.01063293,
 0.0092579 , 0.0105549 , 0.01070213, 0.01112451, 0.0104634 , 0.01170079,
 0.0109055 , 0.01031738, 0.0090625 , 0.00964875, 0.01013877, 0.01041907,
 0.00959162, 0.01410713, 0.01165146, 0.0114012 , 0.01236921, 0.01077037,
 0.01345913, 0.01229578, 0.01130498, 0.00841161, 0.01151462, 0.01084372,
 0.01038993, 0.00827593, 0.00955572, 0.01071439, 0.01015913, 0.00911221,
 0.01165247, 0.00974783])
bs_noise_16_loss = np.array([2.28264276, 2.18376863, 2.0601296,  1.94514803, 1.77165302, 1.59339972,
 1.47003665, 1.39047117, 1.30363142 ,1.23652488, 1.18520265, 1.13431975,
 1.10012968, 1.07117971, 1.02570716 ,0.9892979 , 0.963657  , 0.95231858,
 0.95587226, 0.91729474, 0.91016667, 0.89581289, 0.89104613, 0.86687544,
 0.84103931, 0.83531502, 0.83889369, 0.8172467 , 0.81805754, 0.81518095,
 0.79572926, 0.80219159, 0.78868998, 0.77264628, 0.75537841, 0.76053885,
 0.75667376, 0.76198628, 0.75629922, 0.75228089, 0.74657929, 0.7286031,
 0.72725857, 0.71106841, 0.72007472, 0.71335216, 0.72114924, 0.72096623,
 0.70722924, 0.69774857, 0.69532943, 0.70273255, 0.69105765, 0.69148564,
 0.71358685, 0.69708287])
bs_noise_16_lerror = np.array([0.00783791, 0.01431329, 0.02139199, 0.0262515,  0.03472514, 0.03772738,
 0.02934248, 0.03656137, 0.03312585, 0.03191146, 0.02771092, 0.02525082,
 0.0310235 , 0.03204709, 0.02679975, 0.02106387, 0.01747424, 0.02410209,
 0.01868422, 0.01856949, 0.01839536, 0.023008  , 0.02375214, 0.02414749,
 0.02107842, 0.02142839, 0.02386553, 0.02531919, 0.02260025, 0.02409048,
 0.01929417, 0.02225486, 0.02088976, 0.02051147, 0.01964531, 0.02205408,
 0.0179575 , 0.02702141, 0.02297396, 0.02509838, 0.02612492, 0.02442872,
 0.02715292, 0.02441874, 0.02529901, 0.02158908, 0.02764255, 0.02619674,
 0.02693374, 0.02093602, 0.02234411, 0.02438083, 0.02512514, 0.02309193,
 0.0320467 , 0.02626153])


#accuracy

#noise1.6MMvkn
plt.fill_between(
        step,
        vkn_noise_16_acc  -
        vkn_noise_16_error,
        vkn_noise_16_acc  +
        vkn_noise_16_error,
        color='red',
        alpha=0.5)
plt.plot(
        step,
        vkn_noise_16_acc ,
        color='red',
        label="VKN_FL + DP training , noise_multiplier 1.6",
        linewidth=0.8)


#noise_1.6_bs
plt.fill_between(
        step,

        bs_noise_16_acc -
        bs_noise_16_error,
        bs_noise_16_acc +
        bs_noise_16_error,
        color='green',
        alpha=0.5)
plt.plot(
        step,
        bs_noise_16_acc,
        color='green',
        label="Basic FL + DP training ,  noise multiplier 1.6",
        linewidth=0.8)

plt.xlabel("Training step")
plt.ylabel("Model accuracy âˆˆ [0;1]")
plt.legend()

plt.show()




#Loss

#vkn16
plt.fill_between(
        step,
    vkn_noise_16_loss -
        vkn_noise_16_lerror,
       vkn_noise_16_loss +
        vkn_noise_16_lerror,
        color='red',
        alpha=0.5)
plt.plot(
        step,
        vkn_noise_16_loss,
        color='red',
        label="VKN_FL + DP training, noise_multiplier 1.6 , noise multiplier 0.25",
        linewidth=0.8)

#bs16
plt.fill_between(
        step,
        bs_noise_16_loss -
        bs_noise_16_lerror,
        bs_noise_16_loss +
        bs_noise_16_lerror,
        color='green',
        alpha=0.5)
plt.plot(
        step,
        bs_noise_16_loss,
        color='green',
        label="Basic FL + DP training , noise multiplier 1.6",
        linewidth=0.8)

plt.xlabel("Training step")
plt.ylabel("Loss")
plt.legend()

plt.show()

