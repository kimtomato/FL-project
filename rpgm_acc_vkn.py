import matplotlib.pyplot as plt

#rpgm
import numpy as np

step = [  3,   7,  11,  15,  19,  23,  27,  31,  35, 39,  43,  47,  51,  55,  59,  63,  67,  71,
75,  79,  83,  87,  91,  95,  99, 103, 107, 111, 115, 119, 123, 127, 131, 135, 139, 143,
147, 151, 155, 159, 163, 167, 171, 175, 179, 183, 187, 191, 195, 199, 203, 207, 211, 215,
219, 223]
vkn_noise_0_acc = np.array([0.19030303, 0.33367965, 0.48233766,0.56090909, 0.62151515, 0.65528139,
 0.68493507, 0.69536797, 0.70848485, 0.73510822, 0.73974026, 0.75093506,
 0.75917749, 0.75982684, 0.7661039 , 0.76904762, 0.76991342, 0.77722944,
 0.7830303 , 0.7817316 , 0.78454546, 0.7887013, 0.7891342 , 0.79199134,
 0.79437229, 0.79567099, 0.79805195, 0.80212121, 0.80350649, 0.80281385,
 0.80294372, 0.80606061, 0.80385281, 0.8069697, 0.80779221, 0.80922078,
 0.80593074, 0.81376623, 0.81454545, 0.81783549, 0.81593074, 0.81515151,
 0.81735931, 0.81987013, 0.82155844, 0.82251082, 0.82229437, 0.82324675,
 0.82359307, 0.82264069, 0.82454546, 0.82463204, 0.82558441, 0.82528138,
 0.82424242, 0.82861472])
vkn_noise_0_error =np.array([0.01740034, 0.02036187, 0.01434757 ,0.01649612 ,0.01320497 ,0.00990684,
 0.00909504, 0.01084221, 0.00877102 ,0.00560018 ,0.00663655 ,0.00861053,
 0.0051324 , 0.00678627, 0.0048534  ,0.00532261 ,0.00506579 ,0.00418484,
 0.00546364, 0.00532848, 0.00552117 ,0.005759   ,0.00535403 ,0.00517047,
 0.00494787, 0.0048856 , 0.0041048  ,0.00437891 ,0.00408622 ,0.00435427,
 0.00497093, 0.00383345, 0.00514214 ,0.00442881 ,0.00470664 ,0.00528397,
 0.00438769, 0.00378598 ,0.00408996 ,0.00390932 ,0.00441527 ,0.00496551,
 0.0053628 , 0.00348078 ,0.00406508 ,0.00354138 ,0.00365383 ,0.00433252,
 0.00461633, 0.00514219, 0.00431304 ,0.00513171 ,0.00344065 ,0.00446839,
 0.00406465, 0.00433651])
vkn_noise_0_loss = np.array([2.27764384, 1.9280355,  1.66701954, 1.47440941, 1.32990911, 1.21823802,
 1.1340107 , 1.07066198, 1.01805706, 0.96151501, 0.92142082, 0.88852905,
 0.85640049, 0.83535339, 0.81502948, 0.7963763 , 0.78286047, 0.75752871,
 0.74858944, 0.73805228, 0.72846665, 0.71698049, 0.70561998, 0.69753078,
 0.69093588, 0.68356299 ,0.67629492, 0.67073517, 0.66188137, 0.6556549,
 0.65036243, 0.64617887, 0.64015623, 0.63542192, 0.63185909, 0.63136022,
 0.6219189 , 0.61522865, 0.61024732, 0.6042204 , 0.60485078, 0.59859453,
 0.59541867, 0.59042713, 0.58457954, 0.58330472, 0.58101273, 0.57706383,
 0.57461823, 0.57017872, 0.56898047, 0.56627246, 0.56455734, 0.56237081,
 0.56016454, 0.55429716])
vkn_noise_0_lerror = np.array([0.02861485, 0.01887349, 0.01507056, 0.01804381 ,0.01711487 ,0.01172074,
 0.01253876, 0.01388094, 0.01291653, 0.00944104, 0.0103038 , 0.01198345,
 0.00915969, 0.01033727, 0.00737178, 0.00758708, 0.00785191, 0.00704632,
 0.00801073, 0.00855611, 0.00841894, 0.00988528, 0.00981746, 0.00758795,
 0.00839473, 0.00821109, 0.0079045 , 0.00735724, 0.00627581, 0.00611796,
 0.00747461, 0.00622815, 0.00802701, 0.00733567, 0.00870706, 0.00978809,
 0.00699613, 0.00751285, 0.00722392, 0.00623153, 0.00738426, 0.00811063,
 0.00746444, 0.00578152, 0.00624912, 0.00782353, 0.006025  , 0.00706501,
 0.00922715, 0.00929888, 0.0093938 , 0.00888375, 0.00641036, 0.00825639,
 0.00699008, 0.00669115])

vkn_noise_05_acc = np.array([0.13562771, 0.18554113, 0.24,       0.29666667, 0.36593074, 0.43662338,
 0.50251082, 0.54121212, 0.59082251, 0.62857143, 0.64025974, 0.66593073,
 0.68515151 ,0.69229437, 0.70874459, 0.71493506, 0.72692641, 0.73705628,
 0.74281385, 0.74528138, 0.74709957, 0.75324675, 0.75588744, 0.75891775,
 0.765671  , 0.76549783, 0.77415584, 0.77116883, 0.77164502, 0.77142857,
 0.77857143, 0.77948052, 0.77497836, 0.78168832, 0.78545455, 0.78246753,
 0.78008658, 0.78298702, 0.78268398, 0.78917749, 0.79181818, 0.79229437,
 0.79298702, 0.79307359, 0.79406926, 0.79424243, 0.79675325, 0.79889178,
 0.79792208, 0.79948052, 0.79844156, 0.80103896, 0.80515152, 0.80099567,
 0.80095238, 0.80285714])
vkn_noise_05_error = np.array([0.01020991, 0.01198871, 0.0136667,  0.0185552,  0.01980895, 0.01736524,
 0.01523249, 0.01376223, 0.01265506, 0.01206821, 0.01056997, 0.01135432,
 0.01116407, 0.00889041, 0.0071529 , 0.00679921, 0.00948197, 0.00604812,
 0.00690998, 0.00708498, 0.00741736, 0.00787515, 0.00764126, 0.00838896,
 0.00753393, 0.00567431, 0.00667974, 0.00523048, 0.00605762, 0.00523249,
 0.00662408, 0.0049867 , 0.00666515, 0.00614678 ,0.00528993, 0.00447562,
 0.0039845 , 0.00525034, 0.00592069, 0.00351348, 0.00423187, 0.00439665,
 0.00545502, 0.00489343, 0.0042314 , 0.00491274 ,0.0044166,  0.00528084,
 0.00487946, 0.00607521, 0.00537197, 0.00541798 ,0.00470138, 0.00599987,
 0.00542628, 0.00587219])
vkn_noise_05_loss =np.array([2.28068337, 2.21775085, 2.11003112 ,2.00158529 ,1.84108471 ,1.67360034,
 1.52700723, 1.42221323, 1.31075917, 1.21669762, 1.17442727, 1.10343963,
 1.05346925, 1.01802648, 0.98136651, 0.95431981, 0.9254226 , 0.89644225,
 0.87682262, 0.85913459, 0.84033582, 0.82925952, 0.81337126, 0.80218894,
 0.78399394, 0.77425069, 0.76125567, 0.74939658, 0.7452971 , 0.7361555,
 0.72552594, 0.71947898, 0.72636746, 0.70958792, 0.69993828, 0.70498979,
 0.70311322, 0.69587437, 0.69648488, 0.67980487, 0.67153351, 0.67452352,
 0.66765861, 0.66649851, 0.66099276, 0.65457902, 0.65277917, 0.64848573,
 0.6466533 , 0.64135904, 0.64148235, 0.63927745, 0.62886637, 0.63315843,
 0.63156971, 0.63276508])
vkn_noise_05_lerror = np.array([0.00516141, 0.01185244, 0.01259805, 0.02569274, 0.02485261, 0.0242435,
 0.027575,   0.02050255, 0.01833783, 0.02015923, 0.01914253, 0.01940397,
 0.01761593, 0.01143989, 0.01207937, 0.01142424 ,0.01473507, 0.01202946,
 0.01201672 ,0.0131836 , 0.01294554, 0.01407467, 0.01005666, 0.01357419,
 0.01081708, 0.00933349, 0.00931099, 0.01018579, 0.01128241, 0.00949215,
 0.01303221, 0.00985353, 0.0114099 , 0.01112007, 0.01123576, 0.01061272,
 0.01168986, 0.01179662, 0.01468094, 0.00966057, 0.00927952, 0.00991824,
 0.01020439, 0.01050897, 0.01058442, 0.00988508, 0.01081442, 0.01082533,
 0.01165938, 0.01027277, 0.00990515, 0.01108195, 0.00878762, 0.01056757,
 0.00936733, 0.00934209])

vkn_noise_075_acc =  np.array([0.12562771, 0.1561039,  0.18246753, 0.20004329, 0.2417316, 0.28454545,
 0.33177489, 0.37909091, 0.4221645 , 0.44497836, 0.50030303, 0.51164502,
 0.54168831, 0.56008658, 0.57761905, 0.59099567, 0.60805195, 0.61406927,
 0.62731602, 0.62930736, 0.64757575, 0.65056277, 0.66675325, 0.66242424,
 0.67727273, 0.67380953, 0.67558442, 0.67995671, 0.68497835, 0.69437229,
 0.69978355, 0.69376623, 0.70658009, 0.7082684 , 0.71484848, 0.71597403,
 0.71835498, 0.72112554, 0.72199134, 0.72528138, 0.72891775, 0.73290043,
 0.72199134, 0.72307359, 0.73138528, 0.72588744, 0.73047619, 0.73562771,
 0.73333333, 0.7335065 , 0.73796537, 0.73818182, 0.7404329 , 0.7408658,
 0.7443723,  0.74792208])
vkn_noise_075_error = np.array([0.00677821, 0.0101646,  0.01086029, 0.01249102, 0.01629953, 0.01333245,
 0.0139407 , 0.01754516, 0.0177519 , 0.01327812, 0.01235231, 0.01237343,
 0.01437779, 0.0108538 , 0.01134796, 0.01186902, 0.01259476, 0.01099984,
 0.0079104 , 0.01104751, 0.01143596, 0.01058977, 0.01156244, 0.01228459,
 0.01053215, 0.01214093, 0.01056287, 0.01079136, 0.00829962, 0.00742272,
 0.00990788, 0.01045947, 0.00813825, 0.00851047, 0.00765772, 0.00742793,
 0.00818378, 0.00959317, 0.00832947, 0.00887253, 0.00819902, 0.00744919,
 0.00754712, 0.00854269, 0.0071664 , 0.00862624, 0.00896741, 0.00704136,
 0.00869849, 0.00864698, 0.00776421, 0.00768751, 0.00835723, 0.0087274,
 0.00703163, 0.00727612])
vkn_noise_075_loss = np.array([2.34288341, 2.34981395, 2.35237967, 2.37929957, 2.34138809, 2.13272145,
 1.98185698, 1.83184937, 1.70204358, 1.61347285, 1.46987498, 1.43335927,
 1.35423965, 1.31523846, 1.26573957, 1.2335758 , 1.18127277, 1.16588675,
 1.12739162, 1.11989746, 1.07629294, 1.06913967, 1.03445495, 1.01793499,
 0.99165669, 1.00635512, 0.99726153, 0.9887601 , 0.96342747, 0.93809902,
 0.93862349, 0.93643705, 0.9145724 , 0.90000085, 0.8957534 , 0.88842029,
 0.87314496, 0.86847107, 0.85905108, 0.85568565, 0.8497391 , 0.84186689,
 0.84369842, 0.85700192, 0.84025281, 0.84676018, 0.83601509, 0.82737414,
 0.82706587, 0.82965307, 0.82247357, 0.81418914, 0.81694993, 0.81032709,
 0.79806704, 0.79890152])
vkn_noise_075_lerror = np.array([0.01377035, 0.02873788 ,0.03895678, 0.04650653, 0.06094079, 0.05298143,
 0.0446728,  0.05754442, 0.04198297, 0.0397374 , 0.0318773 , 0.0312204,
 0.03750915, 0.02824476, 0.02766166, 0.02644469, 0.02631112, 0.02760782,
 0.01792779, 0.02340545, 0.02433598, 0.02338415, 0.02750442, 0.02765566,
 0.02371313, 0.03254364, 0.02752973, 0.03062563, 0.02576978, 0.01881104,
 0.02647119, 0.0221556 , 0.02023904, 0.02355162, 0.01992735, 0.01841583,
 0.02125365, 0.02344109, 0.02309242, 0.02596327, 0.01941956, 0.01949698,
 0.01806618, 0.02113256, 0.02029309, 0.02419736, 0.02103364, 0.01978527,
 0.02242511, 0.02269246, 0.01850766, 0.01879778, 0.01853878, 0.02188954,
 0.01731324, 0.01848861])




#accuracy
#noise 0
plt.title('Model Accuracy per training step- RPGM')
plt.fill_between(step, vkn_noise_0_acc - vkn_noise_0_error,  vkn_noise_0_acc + vkn_noise_0_error, color='blue', alpha=0.3)
plt.plot(
        step,
        vkn_noise_0_acc,
        color='blue',
        label="VKN+FL training - noise multiplier 0",
        linewidth=0.8)


#noise_05
plt.fill_between(
        step,
        vkn_noise_05_acc -
        vkn_noise_05_error,
        vkn_noise_05_acc +
        vkn_noise_05_error,
        color='orange',
        alpha=0.5)
plt.plot(
        step,
        vkn_noise_05_acc,
        color='red',
        label="VKN+FL training - noise multiplier 0.5",
        linewidth=0.8)


#noise_0.75
plt.fill_between(
        step,
        vkn_noise_075_acc -
        vkn_noise_075_error,
        vkn_noise_075_acc +
        vkn_noise_075_error,
        color='green',
        alpha=0.5)
plt.plot(
        step,
        vkn_noise_075_acc,
        color='green',
        label="VKN+FL training - noise multiplier 0.75",
        linewidth=0.8)

plt.xlabel("Training step")
plt.ylabel("Model accuracy âˆˆ [0;1]")
plt.legend()

plt.show()




#Loss

#noise 0
plt.title('Loss per training step')

plt.fill_between(step, vkn_noise_0_loss - vkn_noise_0_lerror, vkn_noise_0_loss + vkn_noise_0_lerror, color='blue', alpha=0.3)
plt.plot(
        step,
        vkn_noise_0_loss,
        color='blue',
        label="VKN+FL training - noise multiplier 0 ",
        linewidth=0.8)

#05_loss
plt.fill_between(
        step,
        vkn_noise_05_loss -
        vkn_noise_05_lerror,
        vkn_noise_05_loss +
        vkn_noise_05_lerror,
        color='orange',
        alpha=0.5)
plt.plot(
        step,
        vkn_noise_05_loss,
        color='red',
        label="VKN+FL training - noise multiplier 0.5",
        linewidth=0.8)

#075_loss
plt.fill_between(
        step,
        vkn_noise_075_loss -
        vkn_noise_075_lerror,
        vkn_noise_075_loss +
        vkn_noise_075_lerror,
        color='green',
        alpha=0.5)
plt.plot(
        step,
        vkn_noise_075_loss,
        color='green',
        label="VKN+FL training - noise multiplier 0.75",
        linewidth=0.8)

plt.xlabel("Training step")
plt.ylabel("Loss")
plt.legend()

plt.show()

