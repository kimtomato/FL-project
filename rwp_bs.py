import matplotlib.pyplot as plt

#rwp
import numpy as np
#
step = [ 17,  21,  25,  29,  33,  37,  41,  45,  49,  53,  57,  61,  65,  69,  73,  77,  81,  85,
  89,  93,  97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157,
 161, 165, 169, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221]
#noise0f
bs_noise_0_acc =np.array([0.18502164 ,0.21662338, 0.26337662 ,0.31515152 ,0.34787879, 0.41974026,
 0.44848485, 0.46450217, 0.49181818, 0.51805194, 0.51255411, 0.51848485,
 0.58112554, 0.61030303, 0.57155844, 0.61818182, 0.6230736 , 0.65813853,
 0.67333333, 0.66683983, 0.67861472, 0.64683983, 0.65987013, 0.6747619,
 0.65731601, 0.66541125, 0.68709957, 0.69385281, 0.69515152, 0.69835498,
 0.70255411, 0.70683983, 0.7030303 , 0.69718615, 0.72142857, 0.70103896,
 0.70926407, 0.70649351, 0.70463203, 0.70675325, 0.71774891, 0.70380952,
 0.71207792, 0.7130303 , 0.7208658 , 0.73285714, 0.70220779, 0.71307359,
 0.71458874, 0.72753247, 0.73077922, 0.73177489])
bs_noise_0_error =np.array([0.0240278,  0.02646115, 0.02962929, 0.03551262, 0.02813374, 0.03324407,
 0.0396828 , 0.03540377, 0.03008308, 0.04238704, 0.04274042, 0.04068171,
 0.02982966, 0.0271304 , 0.03911573, 0.02363379, 0.02754052, 0.02223507,
 0.01953279, 0.02571979, 0.02323709, 0.03699464, 0.02486025, 0.02957097,
 0.0322384 , 0.03039074, 0.01868381, 0.02673179, 0.0220718 , 0.02669356,
 0.01913407, 0.01648809, 0.02643475, 0.02789113, 0.01641021, 0.0212828,
 0.02717147, 0.02418643, 0.02439505, 0.02195875, 0.01972395, 0.0245242,
 0.03295333, 0.03263429, 0.02156469, 0.02090529, 0.0249967,  0.02500514,
 0.01992376, 0.01440103, 0.02186064, 0.02249427])
bs_noise_0_loss = np.array([ 3.36361249, 2.97081087, 2.80220624, 2.6501286 , 2.38945207, 2.17188558,
 1.96097482, 1.78450837, 1.71142069, 1.590484  , 1.52780382, 1.44456748,
 1.51991424, 1.44408534, 1.28160283, 1.1983556 , 1.26803451, 1.11871961,
 1.08684913, 1.06142499, 1.00664647, 1.0042145 , 1.07725611, 1.07619918,
 1.03455216, 0.98291673, 0.9767979 , 1.01856209, 0.95045124, 0.9174215,
 0.99055807, 0.89203619, 0.90398978, 0.93616736, 0.89070212, 0.90471278,
 0.85511947, 0.95936256, 0.88420157, 0.91860822, 0.89023568, 0.86349687,
 0.92938941, 0.95713156, 0.86099088, 0.85729201, 0.85616001, 0.89021979,
 0.87071446, 0.86521041, 0.84847001, 0.83697941])
bs_noise_0_lerror = np.array([0.22054255, 0.21779189, 0.24408297, 0.24553143 ,0.21306102, 0.19224693,
 0.12991155, 0.18076789, 0.15866826, 0.1062756 , 0.10958585, 0.1077879,
 0.18559634, 0.20631961, 0.06746882, 0.07100039, 0.13424316, 0.06496848,
 0.05117754, 0.04500836, 0.06091714, 0.04746368, 0.08624077, 0.12699817,
 0.06554663, 0.07811006, 0.05648136, 0.07754909, 0.04586474, 0.05476418,
 0.09805463, 0.04800096, 0.0438915 , 0.08756146, 0.05951146, 0.0453358,
 0.02909782, 0.10162907, 0.05689506, 0.06563836, 0.06103485, 0.04081664,
 0.08997462, 0.11035144, 0.07794454, 0.06351175, 0.07833437, 0.07440234,
 0.05539838, 0.07150395, 0.04997516, 0.04288211])

#0.25
bs_noise_025_acc = np.array([0.11528138, 0.13025974 ,0.14272727, 0.15891775, 0.15251082, 0.16268398,
 0.17034632, 0.1882684 , 0.20398268, 0.18792208, 0.19991342, 0.21238095,
 0.24458875, 0.24943723, 0.24887446, 0.25268398, 0.27073593, 0.26961039,
 0.30532468, 0.29112554, 0.29463203, 0.31709957, 0.32900433, 0.32632035,
 0.35454546, 0.3574026 , 0.38017316, 0.40632035, 0.42796537, 0.43857143,
 0.43532468, 0.4412987 , 0.45437229, 0.45831169, 0.4695671 , 0.5021645,
 0.51225108, 0.51376624, 0.50714286, 0.51857143, 0.53064935, 0.50909091,
 0.55021645, 0.55887446, 0.55935065, 0.57164502, 0.56904762, 0.58060606,
 0.5765368 , 0.58082251, 0.60073593, 0.59367965])
bs_noise_025_error =np.array( [0.00626099, 0.01025808, 0.01121118, 0.0146354,  0.01819297, 0.01686976,
 0.02193197, 0.01944971 ,0.02239305, 0.01863445 ,0.02488421, 0.02273832,
 0.02324333, 0.02081683, 0.02200898, 0.03187948 ,0.0293098 , 0.02818833,
 0.02242432, 0.02550084, 0.0230286 , 0.03374343 ,0.03289098, 0.0279178,
 0.03458309, 0.03637943, 0.04294695, 0.03723376 ,0.03445101, 0.02878974,
 0.03011073, 0.0244341 , 0.0227514 , 0.02648974, 0.02760175, 0.03044292,
 0.02885943, 0.02887492, 0.03317663, 0.02974913, 0.02623853, 0.03043035,
 0.02579139, 0.02837096, 0.02676824, 0.02375354, 0.02304633, 0.02378255,
 0.02591331, 0.02852522, 0.0297771 , 0.02885912])
bs_noise_025_loss = np.array([2.30334788, 2.30228356, 2.29857939, 2.28915185, 2.28028508, 2.26397992,
 2.25152643, 2.24254401, 2.23530527, 2.23290167, 2.22500729 ,2.2100666,
 2.18694257, 2.17098242, 2.13550608, 2.11946765, 2.09896934 ,2.08421597,
 2.07334922, 2.03754145, 2.01209483, 2.00645605, 1.99115425 ,1.95520847,
 1.93420049, 1.90329997, 1.89063417, 1.86290944, 1.81507712 ,1.77217621,
 1.74921775, 1.72994535, 1.69849078, 1.68793293, 1.66077778, 1.65909923,
 1.62111533, 1.58210772, 1.55702271, 1.53773626, 1.53606238, 1.51626802,
 1.51680299, 1.49099139, 1.45927995, 1.42864601, 1.42431744, 1.41356581,
 1.4122173 , 1.38467795, 1.3731108,  1.35526601])
bs_noise_025_lerror = np.array( [0.00191501, 0.00324697, 0.0049127,  0.00862807, 0.01013482, 0.01363668,
 0.01516028, 0.01779004, 0.01789476, 0.01616348, 0.02083637, 0.02242735,
 0.0226674 , 0.02327849, 0.02509019, 0.02709793, 0.02726743, 0.03160273,
 0.03609068, 0.03604068, 0.03593386, 0.0329277 , 0.03887272, 0.03990074,
 0.04613156, 0.04883904, 0.05895633, 0.05305992, 0.05183907, 0.0559063,
 0.04939219, 0.04839776, 0.04946623, 0.04490868, 0.04974609, 0.05170273,
 0.04940625, 0.04621199, 0.04758253, 0.04898049, 0.04902005, 0.05035638,
 0.0506575 , 0.05409129, 0.05075155, 0.04773955, 0.04620882, 0.04313012,
 0.04235381, 0.04057357, 0.0436306 , 0.04828771])


#noise05f
bs_noise_05_acc = np.array([0.11363636, 0.11497836, 0.11333333, 0.12679654 ,0.12770563 ,0.12722944,
 0.1412987 , 0.1461039 , 0.14831169, 0.16147186, 0.16848485, 0.16891775,
 0.1774026 , 0.16424242, 0.1561039 , 0.15991342, 0.18229437, 0.18320346,
 0.20186147, 0.20393939, 0.21619048, 0.20813853, 0.22666667, 0.24515152,
 0.25142857, 0.25476191, 0.24372294, 0.24385281, 0.24034632, 0.25069264,
 0.26064935, 0.28108225, 0.31021645, 0.31770563, 0.31372294, 0.30207792,
 0.30177489, 0.30658009 ,0.32082251, 0.33701299, 0.33787879, 0.35038961,
 0.37307359, 0.35640693 ,0.35969697, 0.35181818, 0.36333334, 0.35510823,
 0.37082251, 0.38649351 ,0.39437229, 0.41731602])
bs_noise_05_error =np.array([0.00657604, 0.00537299 ,0.00600096, 0.0097559 , 0.00860815, 0.00937899,
 0.01197137, 0.01102317, 0.01331052, 0.01514621, 0.01681718, 0.0187211,
 0.01553464, 0.01588864, 0.01310597, 0.01598709, 0.01621384, 0.01675556,
 0.02440339, 0.01850911, 0.01961953, 0.02089091, 0.02083624, 0.01726738,
 0.01799501 ,0.02508998, 0.02870011, 0.02487876, 0.02871476, 0.0246523,
 0.02745765, 0.02432809, 0.02748933, 0.02523492, 0.02431253, 0.02507152,
 0.03182001, 0.03136591, 0.02953526, 0.02921551, 0.03193668, 0.02888794,
 0.029372  , 0.02692932, 0.03094395, 0.02516872, 0.02691262, 0.02954141,
 0.03258973, 0.0255816 , 0.02654702, 0.02750466])
bs_noise_05_loss = np.array([2.31826455, 2.33635662, 2.34266856, 2.35120858 ,2.35369199, 2.36275469,
 2.36968745, 2.37221824, 2.35827305, 2.36101221, 2.37105681, 2.35306594,
 2.34681638, 2.3429663 , 2.33694238, 2.33644127, 2.37343861, 2.34914045,
 2.31918616, 2.34503395, 2.27141893, 2.28931978, 2.33652005, 2.3071828,
 2.23036524, 2.20706788, 2.26196051, 2.33292894, 2.26488554, 2.25442678,
 2.23812193, 2.21994807, 2.12996168, 2.09807311, 2.04407932, 2.07481744,
 2.03687362, 2.08072842, 2.07919487, 2.05110501, 2.0162665 , 1.97232416,
 1.9620557 , 1.88922436, 1.81552077, 1.87849492, 1.8468105 , 1.8865786,
 1.9006089 , 1.85621419, 1.86536482, 1.77693112])
bs_noise_05_lerror = np.array([0.00575176, 0.01059089, 0.01174627, 0.0164901,  0.01890175 ,0.03180514,
 0.03641532, 0.03922409, 0.0275627 , 0.02543324, 0.0402756 , 0.03938765,
 0.03453855, 0.04123392, 0.03390307, 0.04234153, 0.05041548, 0.04924457,
 0.05267445, 0.0677139 , 0.05897912, 0.06094017, 0.06448192, 0.09961769,
 0.06741821, 0.07873473, 0.10599469, 0.11543593, 0.10258531, 0.09162133,
 0.08409456, 0.09055466, 0.09383894, 0.12110546, 0.09660406, 0.11495329,
 0.09684838, 0.11343271, 0.12830495, 0.1271927 , 0.1067716 , 0.1006188,
 0.11220971, 0.10274004, 0.08628307, 0.08736442, 0.07307082, 0.08383358,
 0.07253229, 0.07187284, 0.08679274, 0.06936355])

#noise07f
bs_noise_075_acc = np.array([0.10619048, 0.10268398, 0.10935065, 0.10839827, 0.11731602, 0.11476191,
 0.12103896, 0.12458874, 0.12774892, 0.13320346, 0.1278355 , 0.12800866,
 0.12909091, 0.13108225, 0.13619048, 0.13515152, 0.14709957, 0.14917749,
 0.14718615, 0.1512987 , 0.14147186, 0.15142857, 0.15393939, 0.15601732,
 0.15064935, 0.1508658 , 0.14558442, 0.14640693, 0.16640693, 0.15787879,
 0.16562771, 0.17497836, 0.1738961 , 0.17363636, 0.18545455, 0.1804329,
 0.17649351, 0.17004329, 0.17073593, 0.18679654, 0.19298701, 0.19333333,
 0.20220779, 0.20160173, 0.19839827, 0.20038961, 0.20844156, 0.20558442,
 0.20060606, 0.2 ,       0.20683983, 0.20995671])
bs_noise_075_error =np.array([0.00619268, 0.00395188, 0.00611643, 0.00451779, 0.00532877, 0.00537726,
 0.00613267, 0.0090317 , 0.00947087, 0.01030171, 0.00970062, 0.00740024,
 0.00892955, 0.00956098, 0.00971434, 0.0116952,  0.01070765, 0.01103937,
 0.01129846, 0.01021542, 0.01017333, 0.01146176, 0.01247815, 0.01333235,
 0.01178122, 0.01201282, 0.01135644, 0.0147106 , 0.01825638, 0.01350455,
 0.01457131, 0.0158295 , 0.01416927, 0.0168186 , 0.01640351, 0.0166669,
 0.01361285 ,0.01189681, 0.01135555, 0.01480524, 0.0180487 , 0.01384855,
 0.01605411, 0.0158808 , 0.01618875, 0.02119126, 0.02115985, 0.01949772,
 0.01627167, 0.01488442, 0.01655923, 0.01781617])
bs_noise_075_loss = np.array([2.36640714, 2.45055694 ,2.53911793 ,2.57601722 ,2.62845865 ,2.65090161,
 2.7164988 , 2.75956975, 2.84013788, 2.87046484 ,2.93619118, 2.98484752,
 2.98109154, 3.05319494, 3.17181224, 3.24119596 ,3.0824447 , 3.13879688,
 3.16015402, 3.2704443 , 3.30407754, 3.30137054 ,3.28130831, 3.35257959,
 3.50284799, 3.58772324, 3.81829973, 3.87243819 ,3.75751369, 3.78095518,
 3.78178602, 3.83693845, 3.75891605, 3.67150339 ,3.54847133, 3.53937747,
 3.73705929, 3.87337023, 4.10924139, 4.0731802 , 3.86734126, 3.81611343,
 3.87411252, 3.93924107, 3.90923759, 3.86047721, 3.77061537, 3.86155877,
 3.94928723, 4.01485055, 4.172449  , 4.20966605])
bs_noise_075_lerror =np.array([0.01091223, 0.02754394, 0.03422525, 0.04395457, 0.04205541, 0.04915634,
 0.04872168, 0.06780191, 0.08411422, 0.11144338, 0.15749955, 0.1660022,
 0.13318601, 0.1574325 , 0.17892385, 0.16486508, 0.13455424, 0.12197237,
 0.16820693, 0.17448298, 0.17256517, 0.17301281, 0.1812245 , 0.18692462,
 0.20799322, 0.21721675, 0.27511746, 0.23549877, 0.29375318, 0.23257909,
 0.25367268, 0.29328289, 0.23922582 ,0.29117877, 0.23274388, 0.22853317,
 0.26968402, 0.302357  , 0.29886814, 0.29136496, 0.19989455, 0.21160915,
 0.19880122, 0.23654854, 0.22017986, 0.19238674, 0.27322661, 0.33601895,
 0.34945714, 0.34663458, 0.32517514, 0.4024336])



#accuracy
#noise 0
plt.title('Model Accuracy per training step- RWP')
plt.fill_between(step, bs_noise_0_acc - bs_noise_0_error,  bs_noise_0_acc + bs_noise_0_error, color='blue', alpha=0.3)
plt.plot(
        step,
        bs_noise_0_acc,
        color='blue',
        label="Basic FL training - noise multiplier 0",
        linewidth=0.8)

#noise0.25
plt.fill_between(
        step,
        bs_noise_025_acc -
        bs_noise_025_error,
        bs_noise_025_acc +
        bs_noise_025_error,
        color='red',
        alpha=0.5)
plt.plot(
        step,
        bs_noise_025_acc,
        color='yellow',
        label="Basic FL training - noise multiplier 0.25",
        linewidth=0.8)

#noise_05
plt.fill_between(
        step,
        bs_noise_05_acc -
        bs_noise_05_error,
        bs_noise_05_acc +
        bs_noise_05_error,
        color='orange',
        alpha=0.5)
plt.plot(
        step,
        bs_noise_05_acc,
        color='red',
        label="Basic FL training - noise multiplier 0.5",
        linewidth=0.8)


#noise_0.75
plt.fill_between(
        step,
        bs_noise_075_acc -
        bs_noise_075_error,
        bs_noise_075_acc +
        bs_noise_075_error,
        color='green',
        alpha=0.5)
plt.plot(
        step,
        bs_noise_075_acc,
        color='green',
        label="Basic FL training - noise multiplier 0.75",
        linewidth=0.8)

plt.xlabel("Training step")
plt.ylabel("Model accuracy ∈ [0;1]")
plt.legend()

plt.show()




#Loss

#noise 0
plt.title('Loss per training step -RWP')

plt.fill_between(step, bs_noise_0_loss - bs_noise_0_lerror, bs_noise_0_loss + bs_noise_0_lerror, color='blue', alpha=0.3)
plt.plot(
        step,
        bs_noise_0_loss,
        color='blue',
        label="Basic FL training - noise multiplier 0 ",
        linewidth=0.8)
#025_loss
plt.fill_between(
        step,
        bs_noise_025_loss -
        bs_noise_025_lerror,
        bs_noise_025_loss +
        bs_noise_025_lerror,
        color='red',
        alpha=0.5)
plt.plot(
        step,
        bs_noise_025_loss,
        color='yellow',
        label="Basic FL training - noise multiplier 0.25",
        linewidth=0.8)

#05_loss
plt.fill_between(
        step,
        bs_noise_05_loss -
        bs_noise_05_lerror,
        bs_noise_05_loss +
        bs_noise_05_lerror,
        color='orange',
        alpha=0.5)
plt.plot(
        step,
        bs_noise_05_loss,
        color='red',
        label="Basic FL training - noise multiplier 0.5",
        linewidth=0.8)

#075_loss
plt.fill_between(
        step,
        bs_noise_075_loss -
        bs_noise_075_lerror,
        bs_noise_075_loss +
        bs_noise_075_lerror,
        color='green',
        alpha=0.5)
plt.plot(
        step,
        bs_noise_075_loss,
        color='green',
        label="Basic FL training - noise multiplier 0.75",
        linewidth=0.8)

plt.xlabel("Training step")
plt.ylabel("Loss")
plt.legend()

plt.show()

