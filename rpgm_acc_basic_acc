import matplotlib.pyplot as plt

#rpgm
import numpy as np
#
step =  [ 3,   7,  11,  15,  19,  23,  27,  31,  35, 39,  43,  47,  51,  55,  59,  63,  67,  71,
75,  79,  83,  87,  91,  95,  99, 103, 107, 111, 115, 119, 123, 127, 131, 135, 139, 143,
147, 151, 155, 159, 163, 167, 171, 175, 179, 183, 187, 191, 195, 199, 203, 207, 211, 215,
219, 223]
#noise0f
bs_noise_0_acc =np.array([0.19454545, 0.32238095 ,0.44935065, 0.53051948, 0.58337662, 0.6112987,
 0.64722944, 0.66350649, 0.69649351, 0.70064935, 0.69991342, 0.71562771,
 0.71190476, 0.71406926, 0.72675325, 0.72731602, 0.73515152, 0.73670996,
 0.74069264, 0.74588744, 0.74753247, 0.74463203, 0.74865801, 0.75779221,
 0.7539394 , 0.75787879, 0.765671  , 0.75709957, 0.76943723, 0.7677922,
 0.76645022, 0.76857143, 0.77219914, 0.77679654, 0.78021645, 0.78125541,
 0.78229437, 0.78012987, 0.78510823, 0.78692641, 0.78398269, 0.78813853,
 0.78887446, 0.78298701, 0.79454545, 0.79329005, 0.7891342 , 0.78597403,
 0.7912987 , 0.79722944, 0.79718615, 0.79489177, 0.80134199, 0.79731602,
 0.7995671 , 0.80073593])
bs_noise_0_error =np.array([0.01415791, 0.0148334,  0.02080524, 0.02254727, 0.01634762, 0.01569839,
 0.01063776, 0.01192004, 0.01129705, 0.00997113, 0.01147587, 0.01121799,
 0.01150132, 0.01196951, 0.0117924 , 0.01097769, 0.01427989, 0.01266395,
 0.01113666, 0.00886595, 0.00878325, 0.01254509, 0.0156176 , 0.01068981,
 0.01223954, 0.01224117, 0.00902916, 0.00916913, 0.00809593, 0.00914704,
 0.00880966, 0.00993085, 0.00880111, 0.00894959, 0.00764186, 0.00899774,
 0.00867563, 0.00980174, 0.00927642, 0.0101042 , 0.01025388, 0.00927713,
 0.01055129, 0.01008568, 0.00690348, 0.00681286, 0.01102946, 0.01115151,
 0.0088639 , 0.00799837, 0.00888566, 0.01005365, 0.00677026, 0.00811821,
 0.00813064, 0.00786774])
bs_noise_0_loss = np.array([2.25482951, 1.94911831 ,1.71334518 ,1.53824418, 1.39364222 ,1.29289777,
 1.20637057, 1.14606183, 1.06768906, 1.02512039, 1.00220263, 0.96506517,
 0.95068379, 0.93271515, 0.90458955, 0.89421223, 0.86531804, 0.8516467,
 0.84051138, 0.81815698, 0.81035598, 0.82386561, 0.82036466, 0.7816533,
 0.78412585, 0.77379117, 0.75072308, 0.76320986, 0.73418633, 0.73521066,
 0.73988248, 0.73710451, 0.72009782, 0.7074325 , 0.70351981, 0.69771744,
 0.69145865, 0.68981701, 0.67934009, 0.67499901, 0.67853401, 0.6709584,
 0.67084853, 0.67486   , 0.64798412, 0.65689556, 0.6561713 , 0.66282114,
 0.65110897, 0.63793961, 0.63626193, 0.64284015, 0.62852164, 0.63444576,
 0.63715465, 0.63014564])
bs_noise_0_lerror = np.array([0.01919263, 0.02502873, 0.03104815, 0.0320827 , 0.02656787, 0.02484872,
 0.0201593 , 0.01951157, 0.0163828 , 0.01501503, 0.01891952, 0.01974244,
 0.02130838, 0.0225067 , 0.02250351, 0.02394558, 0.02608043, 0.0235384,
 0.02202468, 0.01797092, 0.01733263, 0.03280023, 0.04420812, 0.02430579,
 0.02635068, 0.03102994, 0.02069269, 0.02118945, 0.01639384, 0.01765988,
 0.0192384 , 0.02063873, 0.01701613, 0.01926328, 0.01821444, 0.01834037,
 0.01879831, 0.02189901, 0.01892296, 0.02186425, 0.02432573, 0.02374123,
 0.02803586, 0.0252376 , 0.01748603, 0.01747694, 0.02047876, 0.02720959,
 0.02194652, 0.02237144, 0.02350448, 0.02705234, 0.01695323, 0.01964173,
 0.022246,   0.02204076])

#noise05f
bs_noise_05_acc = np.array([0.14670996, 0.21718615, 0.2743723 , 0.31402597 ,0.39380952 ,0.47536797,
 0.52831169, 0.55290043, 0.5865368 , 0.61012987 ,0.63337662 ,0.64917749,
 0.65199134, 0.66168831, 0.68199134, 0.69090909 ,0.70233766 ,0.70251083,
 0.69484849, 0.71333333, 0.71372294, 0.71619047 ,0.71779221 ,0.72679654,
 0.73575757, 0.73523809, 0.73108225, 0.74051948 ,0.73419914 ,0.73402598,
 0.7426407 , 0.7391342 , 0.74324675, 0.74861472 ,0.75744589 ,0.75528139,
 0.75909091, 0.75541126, 0.75549783, 0.75675325 ,0.75575757 ,0.76571429,
 0.76393939, 0.76779221, 0.76619048, 0.76900433 ,0.76709957 ,0.76458875,
 0.76909091, 0.77662338, 0.77761905, 0.77541126 ,0.77761904 ,0.77714286,
 0.76995671, 0.77354978])
bs_noise_05_error = np.array([0.0095431 , 0.01932231, 0.01659807, 0.01676605 ,0.02075191 ,0.02176766,
 0.01615087, 0.01868468, 0.01825135, 0.01503945, 0.01338621 ,0.01172105,
 0.01556071, 0.0144551 , 0.0118417 , 0.01053318, 0.01112068 ,0.01205748,
 0.00886193, 0.00957926, 0.00777463, 0.01046825, 0.01141366, 0.01063293,
 0.0092579 , 0.0105549 , 0.01070213, 0.01112451, 0.0104634 , 0.01170079,
 0.0109055 , 0.01031738, 0.0090625 , 0.00964875, 0.01013877, 0.01041907,
 0.00959162, 0.01410713, 0.01165146, 0.0114012 , 0.01236921, 0.01077037,
 0.01345913, 0.01229578, 0.01130498, 0.00841161, 0.01151462, 0.01084372,
 0.01038993, 0.00827593, 0.00955572, 0.01071439, 0.01015913, 0.00911221,
 0.01165247, 0.00974783])
bs_noise_05_loss = np.array([2.28264276, 2.18376863, 2.0601296,  1.94514803, 1.77165302, 1.59339972,
 1.47003665, 1.39047117, 1.30363142 ,1.23652488, 1.18520265, 1.13431975,
 1.10012968, 1.07117971, 1.02570716 ,0.9892979 , 0.963657  , 0.95231858,
 0.95587226, 0.91729474, 0.91016667, 0.89581289, 0.89104613, 0.86687544,
 0.84103931, 0.83531502, 0.83889369, 0.8172467 , 0.81805754, 0.81518095,
 0.79572926, 0.80219159, 0.78868998, 0.77264628, 0.75537841, 0.76053885,
 0.75667376, 0.76198628, 0.75629922, 0.75228089, 0.74657929, 0.7286031,
 0.72725857, 0.71106841, 0.72007472, 0.71335216, 0.72114924, 0.72096623,
 0.70722924, 0.69774857, 0.69532943, 0.70273255, 0.69105765, 0.69148564,
 0.71358685, 0.69708287])
bs_noise_05_lerror = np.array([0.00783791, 0.01431329, 0.02139199, 0.0262515,  0.03472514, 0.03772738,
 0.02934248, 0.03656137, 0.03312585, 0.03191146, 0.02771092, 0.02525082,
 0.0310235 , 0.03204709, 0.02679975, 0.02106387, 0.01747424, 0.02410209,
 0.01868422, 0.01856949, 0.01839536, 0.023008  , 0.02375214, 0.02414749,
 0.02107842, 0.02142839, 0.02386553, 0.02531919, 0.02260025, 0.02409048,
 0.01929417, 0.02225486, 0.02088976, 0.02051147, 0.01964531, 0.02205408,
 0.0179575 , 0.02702141, 0.02297396, 0.02509838, 0.02612492, 0.02442872,
 0.02715292, 0.02441874, 0.02529901, 0.02158908, 0.02764255, 0.02619674,
 0.02693374, 0.02093602, 0.02234411, 0.02438083, 0.02512514, 0.02309193,
 0.0320467 , 0.02626153])

#noise07f
bs_noise_075_acc =np.array([0.12805195, 0.17545454, 0.18735931, 0.21774892 ,0.26450217 ,0.33402598,
 0.38372294 ,0.4191342,  0.47      , 0.49515151, 0.51774892 ,0.53402597,
 0.55545454 ,0.57549784, 0.5882684 , 0.59722943, 0.6038961 , 0.61575758,
 0.62601732, 0.63792208, 0.6343723 , 0.65363636, 0.65965368, 0.67060606,
 0.68619048, 0.68073593, 0.67385281, 0.68891775, 0.68069264, 0.69160173,
 0.6991342 , 0.69683982, 0.70412121, 0.70346321, 0.71181818, 0.71393939,
 0.7091342 , 0.70744589, 0.71385281, 0.71138528, 0.71134199, 0.71164502,
 0.71203463, 0.71255411, 0.71506493, 0.71969697, 0.71900433, 0.72597403,
 0.72748918, 0.72878788, 0.73943723, 0.72831169, 0.72748918, 0.73363636,
 0.73519481 ,0.73813853])
bs_noise_075_error =np.array([0.00836184, 0.01129378 ,0.01273704, 0.01571521, 0.01858778, 0.02566344,
 0.01909586, 0.02566166, 0.01934233, 0.01899714, 0.0171364 , 0.01896025,
 0.01678482, 0.01704244, 0.02037968, 0.01483169, 0.01574302, 0.01253245,
 0.01545814, 0.01259884, 0.01635103, 0.0132949 , 0.01573194, 0.01354964,
 0.01185591, 0.01117488, 0.01015254, 0.01127864, 0.00920151, 0.01227994,
 0.00975496, 0.01056962, 0.01217093, 0.01057824, 0.01069161, 0.01024893,
 0.01141509, 0.00917905, 0.01060508, 0.01194011, 0.01387522, 0.01236406,
 0.01206908, 0.01351858, 0.01570112, 0.00905991, 0.00841603, 0.01258187,
 0.00958763, 0.0100378 , 0.01073384, 0.0115063 , 0.01232417, 0.01202388,
 0.00918798, 0.00989766])
bs_noise_075_loss = np.array([2.3398792,  2.3053776,  2.3121029 , 2.35764413, 2.22683001 ,1.97722873,
 1.81101968, 1.70556426, 1.54305581 ,1.49777102, 1.43481411, 1.38233986,
 1.33207742, 1.26786246, 1.23351175, 1.2132228 , 1.19408378 ,1.14705642,
 1.12278709, 1.09088348, 1.09712595, 1.05249208, 1.04444934, 1.01901923,
 0.97733719, 0.97151898, 0.9916535 , 0.96481445, 0.98579373, 0.95817018,
 0.9331635 , 0.92282151, 0.91658647, 0.90794888, 0.89209258, 0.89142863,
 0.89941676, 0.90149525, 0.89823701, 0.89820652, 0.9004585 , 0.89351,
 0.88955036, 0.88896315, 0.89642544, 0.88106437, 0.88330981, 0.85838989,
 0.85154863, 0.84425804, 0.82609682, 0.84559916, 0.83805181, 0.83266494,
 0.81734575, 0.81390195])
bs_noise_075_lerror =np.array([0.0150831,  0.01946704, 0.04741438, 0.06298953 ,0.07476746, 0.08017083,
 0.05453352, 0.06994663, 0.05056397 ,0.05410411, 0.04886422, 0.04647366,
 0.04407745, 0.04500145, 0.04860274 ,0.03434756, 0.03984423, 0.03021039,
 0.03862434, 0.03185338, 0.04351356, 0.03663811, 0.04344698, 0.04415302,
 0.03119707, 0.02726351, 0.02167325, 0.02974804, 0.02481271, 0.03782724,
 0.03378977, 0.03500176, 0.03021324, 0.02450418, 0.02436457, 0.03048526,
 0.02707364, 0.02491305, 0.03259829, 0.03093792, 0.0372554 , 0.03018714,
 0.03192662, 0.03294358, 0.04412928, 0.02462964, 0.02264672, 0.03276651,
 0.02507546, 0.02872589, 0.03026376, 0.0378781 , 0.03414223, 0.03592226,
 0.02820444, 0.02307857])



#accuracy
#noise 0
plt.title('Model Accuracy per training step- RPGM')
plt.fill_between(step, bs_noise_0_acc - bs_noise_0_error,  bs_noise_0_acc + bs_noise_0_error, color='blue', alpha=0.3)
plt.plot(
        step,
        bs_noise_0_acc,
        color='blue',
        label="Basic FL training - noise multiplier 0",
        linewidth=0.8)


#noise_05
plt.fill_between(
        step,
        bs_noise_05_acc -
        bs_noise_05_error,
        bs_noise_05_acc +
        bs_noise_05_error,
        color='orange',
        alpha=0.5)
plt.plot(
        step,
        bs_noise_05_acc,
        color='red',
        label="Basic FL training - noise multiplier 0.5",
        linewidth=0.8)


#noise_0.75
plt.fill_between(
        step,
        bs_noise_075_acc -
        bs_noise_075_error,
        bs_noise_075_acc +
        bs_noise_075_error,
        color='green',
        alpha=0.5)
plt.plot(
        step,
        bs_noise_075_acc,
        color='green',
        label="Basic FL training - noise multiplier 0.75",
        linewidth=0.8)

plt.xlabel("Training step")
plt.ylabel("Model accuracy âˆˆ [0;1]")
plt.legend()

plt.show()




#Loss

#noise 0
plt.title('Loss per training step -RPGM')

plt.fill_between(step, bs_noise_0_loss - bs_noise_0_lerror, bs_noise_0_loss + bs_noise_0_lerror, color='blue', alpha=0.3)
plt.plot(
        step,
        bs_noise_0_loss,
        color='blue',
        label="Basic FL training - noise multiplier 0 ",
        linewidth=0.8)

#05_loss
plt.fill_between(
        step,
        bs_noise_05_loss -
        bs_noise_05_lerror,
        bs_noise_05_loss +
        bs_noise_05_lerror,
        color='orange',
        alpha=0.5)
plt.plot(
        step,
        bs_noise_05_loss,
        color='red',
        label="Basic FL training - noise multiplier 0.5",
        linewidth=0.8)

#075_loss
plt.fill_between(
        step,
        bs_noise_075_loss -
        bs_noise_075_lerror,
        bs_noise_075_loss +
        bs_noise_075_lerror,
        color='green',
        alpha=0.5)
plt.plot(
        step,
        bs_noise_075_loss,
        color='green',
        label="Basic FL training - noise multiplier 0.75",
        linewidth=0.8)

plt.xlabel("Training step")
plt.ylabel("Loss")
plt.legend()

plt.show()

